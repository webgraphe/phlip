; http://www.paulgraham.com/rootsoflisp.html
; An attempt at reproducing McCarthy's eval

(define (caar l)
    (car (car l)))

(define (cadr l)
    (car (cdr l)))

(define (cadar l)
    (car (cdr (car l))))

(define (caddar 1)
    (car (cdr (cdr (car l)))))

(define (caddr l)
    (car (cdr (cdr l))))

(define (null? x)
    (equals? x '()))

(define (and x y)
    (cond (x (cond (y 't) ('t '())))
        ('t '())))

(define (append x y)
    (cond ((null? x) y)
        ('t (cons (car x) (append (cdr x) y)))))

(define (list x y)
    (cons x (cons y '())))

(define (pair x y)
    (cond ((and (null? x) (null? y)) '())
        ((and (not (atom? x)) (not (atom? y)))
            (cons (list (car x) (car y))
                (pair (cdr x) (cdr y))))))

(define (assoc x y)
    (cond ((equals? (caar y) x) (cadar y))
        ('t (assoc x (cdr y)))))

(define (eval e a)
    (cond
        ((atom? e) (assoc e a))
        ((atom? (car e))
            (cond
                ((equals? (car e) 'quote)
                    (cadr e))
                ((equals? (car e) 'atom?)
                    (atom? (eval (cadr e) a)))
                ((equals? (car e) 'equals?)
                    (equals? (eval (cadr e) a)
                        (eval (caddr e) a)))
                ((equals? (car e) 'car)
                    (car (eval (cadr e) a)))
                ((equals? (car e) 'cdr) (cdr (eval (cadr e) a)))
                ((equals? (car e) 'cons) (cons (eval (cadr e) a)
                    (eval (caddr e) a)))
                ((equals? (car e) 'cond)  (evcon (cdr e) a))
                ('t (eval (cons (assoc (car e) a) (cdr e)) a))))
        ((equals? (caar e) 'label) (eval (cons (caddar e) (cdr e))
            (cons (list (cadar e) (car e)) a)))
        ((equals? (caar e) 'lambda) (eval (caddar e)
            (append (pair (cadar e) (evlis (cdr e) a))
                a)))))

(define (evcon c a)
    (cond ((eval (caar c) a) (eval (cadar c) a))
        ('t (evcon (cdr c) a))))

(define (evlis m a)
    (cond ((null? m) '())
        ('t (cons (eval (car m) a)
            (evlis (cdr m) a)))))
