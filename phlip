#!/usr/bin/env php
<?php

use Webgraphe\Phlip\Atom\IdentifierAtom;
use Webgraphe\Phlip\Atom\KeywordAtom;
use Webgraphe\Phlip\Atom\NumberAtom;
use Webgraphe\Phlip\Atom\StringAtom;
use Webgraphe\Phlip\Context\PhlipyContext;
use Webgraphe\Phlip\Contracts\LexemeContract;
use Webgraphe\Phlip\FormBuilder;
use Webgraphe\Phlip\Lexer;
use Webgraphe\Phlip\Program;
use Webgraphe\Phlip\Stylizer;
use Webgraphe\Phlip\Symbol;

require_once 'vendor/autoload.php';

echo 'Go crazy, you may just "phlip" ;p' . PHP_EOL;
echo "Type \033[1;37m(\033[0m\033[1;33mexit\033[0m\e[1;37m)\e[0m to quit." . PHP_EOL . PHP_EOL;

$context = new PhlipyContext;

$context->define(
    'read',
    function () {
        $lines = [];
        while (true) {
            $line = rtrim(readline($lines ? '' : '> '));
            $break = !$line || '\\' !== $line[strlen($line) - 1];
            $lines[] = rtrim($line, '\\');
            if ($break) {
                break;
            }
        }

        return implode(PHP_EOL, $lines);
    }
);

$context->define(
    'eval',
    function ($source) use ($context) {
        try {
            return Program::parse($source)->execute($context);
        } catch (\Throwable $t) {
            return $t;
        }
    }
);

$formBuilder = new FormBuilder;
$stylizer = new Stylizer(
    function (LexemeContract $lexeme):string {
        switch (true) {
            case $lexeme instanceof Symbol:
                return "\033[1;37m{$lexeme}\033[0m";
            case $lexeme instanceof NumberAtom:
                return "\033[1;36m{$lexeme}\033[0m";
            case $lexeme instanceof StringAtom:
                return "\033[1;34m{$lexeme}\033[0m";
            case $lexeme instanceof IdentifierAtom:
                return "\033[1;33m{$lexeme}\033[0m";
            case $lexeme instanceof KeywordAtom:
                return "\033[1;32m{$lexeme}\033[0m";
            default:
                return (string)$lexeme;
        }
    }
);

$context->define(
    'print',
    function ($result) use ($formBuilder, $stylizer) {
        $color = '1;30';
        $type = gettype($result);
        $extra = null;
        switch (true) {
            case $result instanceof \Throwable:
                $type = get_class($result);
                $output = $result->getMessage();
                $extra = $result->getTraceAsString();
                $color = '0;31';
                break;
            /** @noinspection PhpMissingBreakStatementInspection */
            case is_object($result):
                $type = get_class($result);
                // Intentional fall-through
            default:
                $form = $formBuilder->asForm($result);
                $output = $stylizer->stylizeLexemeStream((new Lexer)->parseSource((string)$form));
        }

        if ($type) {
            echo "\033[{$color}m{$type}\033[0m" . PHP_EOL;
        }
        if (strlen($output = trim($output))) {
            echo $output . PHP_EOL;
        }
        if (strlen($extra = trim($extra))) {
            echo trim($extra) . PHP_EOL;
        }

        echo PHP_EOL;

        return true;
    }
);

$context->define(
    'exit',
    function ($code = 0) {
        echo "Good bye!" . PHP_EOL . PHP_EOL;
        exit($code);
    }
);

$context->define('loop', $context->get('while'));

Program::parse('(loop (print (eval (read))))')->execute($context);
