#!/usr/bin/env php
<?php

namespace Webgraphe\Phlip;

require_once 'vendor/autoload.php';

$context = Phlipy::withRepl(Phlipy::context(), [], $options = Phlipy::optionsFromGlobals());

if (!empty($options['help'])) {
    echo <<<USAGE
Webgraphe Phlip

Usage:
    $ phlip [OPTIONS]
    $ phlip [OPTIONS] < FILENAME
    $ echo "phlip script" | phlip [OPTIONS]

  Options:
    --help          Displays usage
    --colors        Toggles CLI colors
    --json-alike    Toggles JSON-alike output
    --return-types  Toggles display of return types
    --verbose       Toggles more verbose output

USAGE;
    exit(0);
}

try {
    // Phlip script injected from the input
    if (false !== ftell(STDIN)) {
        $script = trim(file_get_contents('php://stdin'));
        $result = Program::parse($script)->execute($context);
        $context = $context->stack();
        $context->let('result', $result);
        Program::parse('(print result)')->execute($context);

        exit(0);
    }

    // Interactive REPL prompt
    echo 'Webgraphe Phlip' . PHP_EOL;
    echo "Type (exit) to quit." . PHP_EOL . PHP_EOL;
    Program::parse('(loop (print (eval (read))))')->execute($context);
} catch (\Throwable $exception) {
    echo "Webgraphe Phlip FATAL ERROR: " . PHP_EOL;
    while ($exception) {
        echo '- ' . get_class($exception) . ': ' . $exception->getMessage() . PHP_EOL;
        $exception = $exception->getPrevious();
    }
    exit(1);
}
