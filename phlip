#!/usr/bin/env php
<?php

namespace Webgraphe\Phlip;

use Throwable;
use Webgraphe\Phlip\Operation\LanguageConstruct\EvalOperation;

$autoloadFiles = [
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php',
];
foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        define('PHLIP_AUTOLOAD_FILE', realpath($autoloadFile));
        break;
    }
}
unset($autoloadFile);
if (!defined('PHLIP_AUTOLOAD_FILE')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL
        . '    composer install' . PHP_EOL . PHP_EOL
        . 'You can learn all about Composer on https://getcomposer.org' . PHP_EOL
    );

    exit(1);
}

/** @noinspection PhpIncludeInspection */
require PHLIP_AUTOLOAD_FILE;

$options = iterator_to_array(
    (function () {
        foreach ($_SERVER['argv'] as $arg) {
            if (preg_match("/^--([^=]+)=?(.+)?/", $arg, $matches)) {
                yield $matches[1] => $matches[2] ?? true;
            }
        }
    })()
);

if (!empty($options['help'])) {
    echo <<<USAGE
Webgraphe Phlip

Usage:
    $ phlip [OPTIONS]
    $ phlip [OPTIONS] < FILENAME
    $ echo "phlip script" | phlip [OPTIONS]

  Options:
    --help ···························· Displays usage
    --colors ·························· Toggles CLI colors
    --json-alike ······················ Toggles JSON-alike output
    --return-types ···················· Toggles display of return types
    --verbose ························· Toggles more verbose output
    --read.prompt= ···················· Replaces the prompt (defaults to "phlip [%TICKS%] > ")
    --read.multi-line ················· Toggles support to capture multi-lines (hit ENTER twice to submit forms)


USAGE;
    exit(0);
}

try {
    $context = Phlipy::interoperable()->withRepl($options)->getContext();
    EvalOperation::assertStaticType($context->get(EvalOperation::IDENTIFIER))->bindToContext($context);

    $io = new IOMode(STDIN);
    if ($io->getSize() && ($io->isRegularFile() || $io->isNamedPipe())) {
        $context->define('stdin', trim(file_get_contents('php://stdin')));
        Program::parse('(print (eval stdin))')->execute($context);

        exit(0);
    }

    // Interactive REPL prompt
    echo 'Webgraphe Phlip' . PHP_EOL;
    echo 'Type (exit) to quit.' . PHP_EOL . PHP_EOL;

    Program::parse('(loop (print (eval (read))))')->execute($context);
} catch (Throwable $exception) {
    echo "Webgraphe Phlip FATAL ERROR:" . PHP_EOL . PHP_EOL;
    while ($exception) {
        echo get_class($exception) . ': ' . $exception->getMessage() . PHP_EOL;
        echo $exception->getTraceAsString() . PHP_EOL . PHP_EOL;
        $exception = $exception->getPrevious();
    }
    exit(1);
}
