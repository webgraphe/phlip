#!/usr/bin/env php
<?php

namespace Webgraphe\Phlip;

use Webgraphe\Phlip\Atom\IdentifierAtom;
use Webgraphe\Phlip\Atom\KeywordAtom;
use Webgraphe\Phlip\Atom\NumberAtom;
use Webgraphe\Phlip\Atom\StringAtom;
use Webgraphe\Phlip\Contracts\LexemeContract;
use Webgraphe\Phlip\Exception\ProgramException;

require_once 'vendor/autoload.php';

$options = [
    'verbose' => false
];
foreach ($argv as $arg) {
    if (preg_match("/^--([^=]+)=?(.+)?/", $arg, $matches)) {
        if (!isset($options[$matches[1]])) {
            echo "Unhandled option '--$matches[1]'" . PHP_EOL;
            exit(1);
        }

        $options[$matches[1]] = $matches[2] ?? true;
    }
}

$context = Phlipy::context();

$context->define(
    'read',
    function () {
        $lines = [];
        while (true) {
            $line = rtrim(readline($lines ? '' : 'phlip > '));
            $break = !$line || '\\' !== $line[strlen($line) - 1];
            $lines[] = rtrim($line, '\\');
            if ($break) {
                break;
            }
        }

        return implode(PHP_EOL, $lines);
    }
);

$context->define(
    'evaluate',
    function ($source) use ($context) {
        try {
            return Program::parse($source)->execute($context);
        } catch (\Throwable $t) {
            return $t;
        }
    }
);

$formBuilder = new FormBuilder;
$stylizer = new Stylizer(
    function (LexemeContract $lexeme): string {
        if ($lexeme instanceof Symbol) {
            return "\033[1;37m{$lexeme}\033[0m";
        }

        if ($lexeme instanceof NumberAtom) {
            return "\033[1;36m{$lexeme}\033[0m";
        }

        if ($lexeme instanceof StringAtom) {
            return "\033[1;34m{$lexeme}\033[0m";
        }

        if ($lexeme instanceof IdentifierAtom) {
            return "\033[1;33m{$lexeme}\033[0m";
        }

        if ($lexeme instanceof KeywordAtom) {
            return "\033[1;32m{$lexeme}\033[0m";
        }

        return (string)$lexeme;
    }
);
$lexer = new Lexer;

$context->define(
    'print',
    $print = function ($result) use ($formBuilder, $stylizer, $lexer, $options, &$print) {
        $color = '1;30';
        $type = gettype($result);
        $extras = [];
        if ($result instanceof \Throwable) {
            if ($previous = $result->getPrevious()) {
                call_user_func($print, $previous);
            }
            $type = get_class($result);
            $output = $result->getMessage();
            if ($result instanceof ProgramException) {
                $stack = [];
                $context = $result->getContext();
                while ($context) {
                    $forms = $result->getContext()->getFormStack();
                    while ($forms) {
                        $stack[] = $stylizer->stylizeSource((string)array_pop($forms));
                    }
                    $context = $context->getParent();
                }
                $extras[] = 'Phlip Call Stack:' . PHP_EOL . implode(PHP_EOL, $stack);
            }
            if ($options['verbose']) {
                $extras[] = "PHP Stack Trace:" . PHP_EOL . $result->getTraceAsString();
            }
            $color = '0;31';
        } else {
            if (is_object($result)) {
                $type = get_class($result);
            }

            try {
                $form = $formBuilder->asForm($result);
                $output = $stylizer->stylizeLexemeStream($lexer->parseSource((string)$form));
            } catch (\Throwable $t) {
                $output = '';
            }
        }

        if ($type) {
            echo "\033[{$color}m{$type}\033[0m" . PHP_EOL;
        }

        if (strlen($output = trim($output))) {
            echo $output . PHP_EOL;
        }

        if ($extras) {
            echo PHP_EOL . implode(PHP_EOL . PHP_EOL, $extras) . PHP_EOL;
        }

        echo PHP_EOL;

        return true;
    }
);

$context->define(
    'exit',
    function ($code = 0) {
        echo "Good bye!" . PHP_EOL . PHP_EOL;
        exit($code);
    }
);

$context->define('loop', $context->get('while'));

echo 'Go crazy, you may just "phlip" ;p' . PHP_EOL;
echo "Type " . $stylizer->stylizeSource('(exit)', $lexer) . " to quit." . PHP_EOL . PHP_EOL;

while (true) {
    try {
        Program::parse('(loop (print (evaluate (read))))')->execute($context);
    } catch (\Exception $exception) {
        call_user_func($print, $exception);
    }
}
